SET(ANDROID_NDK_ROOT "$ENV{ANDROID_NDK_ROOT}" CACHE PATH "Android Toolchain location")
SET(ANDROID_NDK_TOOLCHAIN_DEBUG ON)
SET(ANDROID_NDK_HOST_64BIT OFF CACHE BOOL "Host OS is 64bit architecture")
SET(ANDROID_INSTALL_PREFIX)

SET(ANDROID_NDK_HOST)
IF(APPLE)
    SET(ANDROID_NDK_HOST "darwin-x86")
ELSEIF(WIN32)
    SET(ANDROID_NDK_HOST "windows")
ELSEIF(UNIX)
    SET(ANDROID_NDK_HOST "linux-x86")
ELSE()
    MESSAGE(FATAL_ERROR "Platform not supported")
ENDIF()

IF(ANDROID_NDK_HOST_64BIT)
    SET(ANDROID_NDK_HOST "${ANDROID_NDK_HOST}_64")
ENDIF()

SET(CMAKE_CROSSCOMPILING TRUE)
SET(CMAKE_SYSTEM_NAME Linux)
SET(CMAKE_SKIP_RPATH ON)

SET(ANDROID 1)

set(ANDROID_NDK_ARCH_SUPPORTED "arm;armv7;x86;mips")
set(ANDROID_NDK_ARCH "arm" CACHE STRING "Android NDK CPU architecture (${ANDROID_NDK_ARCH_SUPPORTED})")
SET_PROPERTY(CACHE ANDROID_NDK_ARCH PROPERTY STRINGS ${ANDROID_NDK_ARCH_SUPPORTED})

SET(ANDROID_NDK_ABI)
SET(ANDROID_NDK_ABI_EXT)
SET(ANDROID_NDK_GCC_PREFIX)

SET(ANDROID_NDK_ARCH_CFLAGS)
SET(ANDROID_NDK_ARCH_LDFLAGS)

IF("${ANDROID_NDK_ARCH}" STREQUAL "arm" )
    SET(CMAKE_SYSTEM_PROCESSOR "arm")
    SET(ANDROID_NDK_ABI "armeabi")
    SET(ANDROID_NDK_ABI_EXT "arm-linux-androideabi")
    SET(ANDROID_NDK_GCC_PREFIX "arm-linux-androideabi")
    SET(ANDROID_NDK_ARCH_CFLAGS "-D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ -Wno-psabi -march=armv5te -mtune=xscale -msoft-float -mthumb")
ELSEIF("${ANDROID_NDK_ARCH}" STREQUAL "armv7" )
    SET(CMAKE_SYSTEM_PROCESSOR "arm")
    SET(ANDROID_NDK_ABI "armeabi-v7a")
    SET(ANDROID_NDK_ABI_EXT "arm-linux-androideabi")
    SET(ANDROID_NDK_GCC_PREFIX "arm-linux-androideabi")
    SET(ANDROID_NDK_ARCH_CFLAGS "-march=armv7-a -mfloat-abi=softfp")
    SET(ANDROID_NDK_ARCH_LDFLAGS "-Wl,--fix-cortex-a8")
ELSEIF("${ANDROID_NDK_ARCH}" STREQUAL "x86" )
    SET(ANDROID_NDK_ABI "x86")
    SET(ANDROID_NDK_ABI_EXT "x86")
    SET(ANDROID_NDK_GCC_PREFIX "i686-linux-android")
ELSEIF("${ANDROID_NDK_ARCH}" STREQUAL "mips" )
    SET(ANDROID_NDK_ABI "mips")
    SET(ANDROID_NDK_ABI_EXT "mipsel-linux-android")
    SET(ANDROID_NDK_GCC_PREFIX "mipsel-linux-android")
ENDIF()

IF(EXISTS "${CMAKE_INSTALL_PREFIX}/src/main")
    SET(ANDROID_LIB_PREFIX "src/main/jniLibs")
    SET(ANDROID_SRC_PREFIX "src/main/java")
ELSE()
    SET(ANDROID_LIB_PREFIX "libs")
    SET(ANDROID_SRC_PREFIX "src")
ENDIF()
SET(ANDROID_SO_PREFIX "${ANDROID_LIB_PREFIX}/${ANDROID_NDK_ABI}")

IF(ANDROID_NDK_TOOLCHAIN_DEBUG)
    MESSAGE(STATUS "ANDROID_NDK_ABI - ${ANDROID_NDK_ABI}")
    MESSAGE(STATUS "ANDROID_NDK_ABI_EXT - ${ANDROID_NDK_ABI_EXT}")
    MESSAGE(STATUS "ANDROID_NDK_ARCH_CFLAGS - ${ANDROID_NDK_ARCH_CFLAGS}")
ENDIF()
set(ANDROID_NDK_GLOBAL_CFLAGS "-fpic -fomit-frame-pointer -fno-strict-aliasing -finline-limit=64 -ffunction-sections -funwind-tables -fstack-protector")

# set the Android Platform
SET(ANDROID_API "android-9" CACHE STRING "Android SDK API")

# set sysroot - in Android this in function of Android API and architecture
SET(ANDROID_NDK_SYSROOT)
IF("${ANDROID_NDK_ARCH}" STREQUAL "arm" OR "${ANDROID_NDK_ARCH}" STREQUAL "armv7")
    SET(ANDROID_NDK_SYSROOT "${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-arm" CACHE PATH "NDK sysroot" FORCE)
ELSEIF("${ANDROID_NDK_ARCH}" STREQUAL "x86")
    SET(ANDROID_NDK_SYSROOT "${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-x86" CACHE PATH "NDK sysroot" FORCE)
ELSEIF("${ANDROID_NDK_ARCH}" STREQUAL "mips")
    SET(ANDROID_NDK_SYSROOT "${ANDROID_NDK_ROOT}/platforms/${ANDROID_API}/arch-mips" CACHE PATH "NDK sysroot" FORCE)
ENDIF()

SET(CMAKE_C_COMPILER_WORKS 1)
SET(CMAKE_CXX_COMPILER_WORKS 1)
SET(CMAKE_SKIP_COMPATIBILITY_TESTS 1)

SET(ANDROID_NDK_GCC_VERSION "4.8")

SET(ANDROID_NDK_GLOBAL_LDFLAGS "-Wl,--no-undefined -Wl,-z,noexecstack -Wl,--gc-sections -Wl,-z,nocopyreloc")

EXEC_PROGRAM(
    ${ANDROID_NDK_ROOT}/toolchains/${ANDROID_NDK_ABI_EXT}-${ANDROID_NDK_GCC_VERSION}/prebuilt/${ANDROID_NDK_HOST}/bin/${ANDROID_NDK_GCC_PREFIX}-gcc 
    ARGS "-print-libgcc-file-name"
    OUTPUT_VARIABLE ANDROID_NDK_GCC_COMPANIONLIBRARY
    )

GET_FILENAME_COMPONENT(ANDROID_NDK_GCC_COMPANIONLIBRARY_PATH ${ANDROID_NDK_GCC_COMPANIONLIBRARY} PATH)
SET(COMMON_FLAGS "-DANDROID ${CMAKE_C_FLAGS} --sysroot=${ANDROID_NDK_SYSROOT}")

SET(CMAKE_C_FLAGS "${COMMON_FLAGS}" CACHE STRING "C Flags" FORCE)
SET(CMAKE_CXX_FLAGS "${COMMON_FLAGS} ${ANDROID_NDK_STL_CXXFLAGS} -L${ANDROID_NDK_STL_LIBRARYPATH} ${ANDROID_NDK_STL_LDFLAGS}" CACHE STRING "C++ Flags" FORCE)

SET(CMAKE_C_COMPILER ${ANDROID_NDK_ROOT}/toolchains/${ANDROID_NDK_ABI_EXT}-${ANDROID_NDK_GCC_VERSION}/prebuilt/${ANDROID_NDK_HOST}/bin/${ANDROID_NDK_GCC_PREFIX}-gcc CACHE PATH "C compiler" FORCE)
SET(CMAKE_CXX_COMPILER ${ANDROID_NDK_ROOT}/toolchains/${ANDROID_NDK_ABI_EXT}-${ANDROID_NDK_GCC_VERSION}/prebuilt/${ANDROID_NDK_HOST}/bin/${ANDROID_NDK_GCC_PREFIX}-g++ CACHE PATH "C++ compiler" FORCE)

IF(ANDROID_NDK_TOOLCHAIN_DEBUG)
    MESSAGE(STATUS "GCC companion library: ${ANDROID_NDK_GCC_COMPANIONLIBRARY}")
    MESSAGE(STATUS "CMAKE_C_COMPILER: ${CMAKE_C_COMPILER}")
    MESSAGE(STATUS "CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
    MESSAGE(STATUS "ANDROID_NDK_SYSROOT: ${ANDROID_NDK_SYSROOT}")
ENDIF()

# root path
SET(CMAKE_FIND_ROOT_PATH ${ANDROID_NDK_SYSROOT})

SET(CMAKE_SYSTEM_PROGRAM_PATH "${ANDROID_NDK_ROOT}/toolchains/${ANDROID_NDK_ABI_EXT}-${ANDROID_NDK_GCC_VERSION}/prebuilt/${ANDROID_NDK_HOST}/bin/")

# search paths
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
